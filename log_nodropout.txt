ip-10-169-10-10% python dynamic_CNN_for_sentences.py                                                                                                      [~/dynamic_cnn_for_nlp]
Using gpu device 0: GRID K520
############# Load Datasets ##############
train_set :  8544
dev_set   :  1101
test_set  :  2210
------------------------------
vocab_szie:  16582
dev_unknown_words  :  0
test_unknown_words :  0
############# Model Setting ##############
Use pretrained embeddings: OFF
/home/ec2-user/dynamic_cnn_for_nlp/dcnn_train.py:132: DeprecationWarning: Division of two integer types with x / y is deprecated, please use x // y for an integer division.
  dynamic_k = T.cast(length_x * (number_of_convolutinal_layer - index_of_convolitonal_layer) / number_of_convolutinal_layer, 'int64')
/home/ec2-user/dynamic_cnn_for_nlp/dcnn_train.py:132: DeprecationWarning: Division of two integer types with x / y is deprecated, please use x // y for an integer division.
  dynamic_k = T.cast(length_x * (number_of_convolutinal_layer - index_of_convolitonal_layer) / number_of_convolutinal_layer, 'int64')
n_in :  200
/home/ec2-user/anaconda/lib/python2.7/site-packages/theano/scan_module/scan_perform_ext.py:133: RuntimeWarning: numpy.ndarray size changed, may indicate binary incompatibility
  from scan_perform.scan_perform import *
############# Learning ##############
== epoch : 0 ==
i : (0/8544)  (cost : 1.611499 )
i : (1000/8544)  (cost : 0.644837 )
i : (2000/8544)  (cost : 0.354524 )
i : (3000/8544)  (cost : 1.806594 )
i : (4000/8544)  (cost : 0.885272 )
i : (5000/8544)  (cost : 0.551456 )
i : (6000/8544)  (cost : 0.887001 )
i : (7000/8544)  (cost : 1.728023 )
i : (8000/8544)  (cost : 2.605679 )
  train_set : 0.215824
  dev_set   : 0.191644
  test_set  : 0.226697
== epoch : 1 ==
i : (0/8544)  (cost : 4.539783 )
i : (1000/8544)  (cost : 0.634549 )
i : (2000/8544)  (cost : 0.448038 )
i : (3000/8544)  (cost : 2.338078 )
i : (4000/8544)  (cost : 0.624485 )
i : (5000/8544)  (cost : 0.856044 )
i : (6000/8544)  (cost : 0.517049 )
i : (7000/8544)  (cost : 2.712218 )
i : (8000/8544)  (cost : 1.720772 )
  train_set : 0.174157
  dev_set   : 0.171662
  test_set  : 0.190950
== epoch : 2 ==
i : (0/8544)  (cost : 2.658241 )
i : (1000/8544)  (cost : 0.564243 )
i : (2000/8544)  (cost : 0.400793 )
i : (3000/8544)  (cost : 1.861721 )
i : (4000/8544)  (cost : 0.461966 )
i : (5000/8544)  (cost : 0.399072 )
i : (6000/8544)  (cost : 0.849616 )
i : (7000/8544)  (cost : 1.961069 )
i : (8000/8544)  (cost : 2.255998 )
  train_set : 0.264981
  dev_set   : 0.252498
  test_set  : 0.255656
== epoch : 3 ==
i : (0/8544)  (cost : 3.106922 )
i : (1000/8544)  (cost : 0.094279 )
i : (2000/8544)  (cost : 0.077484 )
i : (3000/8544)  (cost : 0.262868 )
i : (4000/8544)  (cost : 0.841234 )
i : (5000/8544)  (cost : 0.497979 )
i : (6000/8544)  (cost : 1.661664 )
i : (7000/8544)  (cost : 2.104939 )
i : (8000/8544)  (cost : 2.319778 )
  train_set : 0.275164
  dev_set   : 0.217984
  test_set  : 0.213575
== epoch : 4 ==
i : (0/8544)  (cost : 4.974788 )
i : (1000/8544)  (cost : 0.003487 )
i : (2000/8544)  (cost : 0.023801 )
i : (3000/8544)  (cost : 0.061087 )
i : (4000/8544)  (cost : 0.027205 )
i : (5000/8544)  (cost : 0.385031 )
i : (6000/8544)  (cost : 0.631642 )
i : (7000/8544)  (cost : 0.146536 )
i : (8000/8544)  (cost : 0.802445 )
  train_set : 0.490169
  dev_set   : 0.284287
  test_set  : 0.283258
== epoch : 5 ==
i : (0/8544)  (cost : 0.447864 )
i : (1000/8544)  (cost : 0.000941 )
i : (2000/8544)  (cost : 0.001377 )
i : (3000/8544)  (cost : 0.002975 )
i : (4000/8544)  (cost : 0.003878 )
i : (5000/8544)  (cost : 0.243261 )
i : (6000/8544)  (cost : 0.070274 )
i : (7000/8544)  (cost : 0.000205 )
i : (8000/8544)  (cost : 0.000043 )
  train_set : 0.517790
  dev_set   : 0.286104
  test_set  : 0.281448
== epoch : 6 ==
i : (0/8544)  (cost : 0.003248 )
i : (1000/8544)  (cost : 0.000011 )
i : (2000/8544)  (cost : 0.002432 )
i : (3000/8544)  (cost : 0.000002 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000514 )
i : (6000/8544)  (cost : 0.008258 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000083 )
  train_set : 0.551264
  dev_set   : 0.245232
  test_set  : 0.278281
== epoch : 7 ==
i : (0/8544)  (cost : 0.002137 )
i : (1000/8544)  (cost : 0.000005 )
i : (2000/8544)  (cost : 0.932886 )
i : (3000/8544)  (cost : 0.000001 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 7.432291 )
i : (6000/8544)  (cost : 0.537291 )
i : (7000/8544)  (cost : 0.000006 )
i : (8000/8544)  (cost : 0.000001 )
  train_set : 0.557350
  dev_set   : 0.289737
  test_set  : 0.281900
== epoch : 8 ==
i : (0/8544)  (cost : 0.000032 )
i : (1000/8544)  (cost : 0.000106 )
i : (2000/8544)  (cost : 0.000645 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000003 )
i : (5000/8544)  (cost : 2.623181 )
i : (6000/8544)  (cost : 0.000098 )
i : (7000/8544)  (cost : 0.000003 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.571980
  dev_set   : 0.282470
  test_set  : 0.285973
== epoch : 9 ==
i : (0/8544)  (cost : 0.000882 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000003 )
i : (3000/8544)  (cost : 0.542562 )
i : (4000/8544)  (cost : 0.000435 )
i : (5000/8544)  (cost : 0.000037 )
i : (6000/8544)  (cost : 0.717440 )
i : (7000/8544)  (cost : 0.140832 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.466292
  dev_set   : 0.243415
  test_set  : 0.243891
== epoch : 10 ==
i : (0/8544)  (cost : 0.000015 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000022 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000561 )
i : (6000/8544)  (cost : 0.018711 )
i : (7000/8544)  (cost : 0.019966 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.530431
  dev_set   : 0.256131
  test_set  : 0.271946
== epoch : 11 ==
i : (0/8544)  (cost : 0.000008 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.789138 )
i : (7000/8544)  (cost : 0.938934 )
i : (8000/8544)  (cost : 2.387791 )
  train_set : 0.156484
  dev_set   : 0.139873
  test_set  : 0.136199
== epoch : 12 ==
i : (0/8544)  (cost : 4.255753 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000009 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000011 )
i : (6000/8544)  (cost : 8.193522 )
i : (7000/8544)  (cost : 0.051816 )
i : (8000/8544)  (cost : 0.000007 )
  train_set : 0.511704
  dev_set   : 0.263397
  test_set  : 0.276018
== epoch : 13 ==
i : (0/8544)  (cost : 0.000155 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 3.092817 )
i : (6000/8544)  (cost : 0.016018 )
i : (7000/8544)  (cost : 0.065389 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.420997
  dev_set   : 0.224342
  test_set  : 0.214027
== epoch : 14 ==
i : (0/8544)  (cost : 2.783615 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.007938 )
i : (8000/8544)  (cost : 0.000006 )
  train_set : 0.458216
  dev_set   : 0.316076
  test_set  : 0.302715
== epoch : 15 ==
i : (0/8544)  (cost : 0.929974 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.058238 )
i : (8000/8544)  (cost : 0.000002 )
  train_set : 0.416199
  dev_set   : 0.261580
  test_set  : 0.265158
== epoch : 16 ==
i : (0/8544)  (cost : 0.016495 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.090010 )
i : (7000/8544)  (cost : 0.407819 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.437968
  dev_set   : 0.254314
  test_set  : 0.267873
== epoch : 17 ==
i : (0/8544)  (cost : 5.292995 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000021 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.001812 )
i : (8000/8544)  (cost : 0.000001 )
  train_set : 0.426615
  dev_set   : 0.234332
  test_set  : 0.243891
== epoch : 18 ==
i : (0/8544)  (cost : 0.018045 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000067 )
  train_set : 0.440426
  dev_set   : 0.267030
  test_set  : 0.261538
== epoch : 19 ==
i : (0/8544)  (cost : 0.013313 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.003277 )
  train_set : 0.524813
  dev_set   : 0.260672
  test_set  : 0.267421
== epoch : 20 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000054 )
  train_set : 0.309457
  dev_set   : 0.231608
  test_set  : 0.230769
== epoch : 21 ==
i : (0/8544)  (cost : 0.374488 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000002 )
  train_set : 0.251873
  dev_set   : 0.218892
  test_set  : 0.216290
== epoch : 22 ==
i : (0/8544)  (cost : 0.148810 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.551147
  dev_set   : 0.285195
  test_set  : 0.273756
== epoch : 23 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000003 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000009 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.625585
  dev_set   : 0.292461
  test_set  : 0.290498
== epoch : 24 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000024 )
i : (8000/8544)  (cost : 0.000040 )
  train_set : 0.615286
  dev_set   : 0.296094
  test_set  : 0.281448
== epoch : 25 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.048456 )
i : (6000/8544)  (cost : 0.000115 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.043196 )
  train_set : 0.717814
  dev_set   : 0.298819
  test_set  : 0.300452
== epoch : 26 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000027 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.598081
  dev_set   : 0.279746
  test_set  : 0.273303
== epoch : 27 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 11.482038 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.567650
  dev_set   : 0.262489
  test_set  : 0.250226
== epoch : 28 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000002 )
  train_set : 0.756554
  dev_set   : 0.306085
  test_set  : 0.305882
== epoch : 29 ==
i : (0/8544)  (cost : 0.000013 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.502224
  dev_set   : 0.275204
  test_set  : 0.266516
== epoch : 30 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.599368
  dev_set   : 0.265213
  test_set  : 0.268778
== epoch : 31 ==
i : (0/8544)  (cost : 0.928905 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.639468 )
  train_set : 0.568469
  dev_set   : 0.289737
  test_set  : 0.259276
== epoch : 32 ==
i : (0/8544)  (cost : 0.000005 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.608848
  dev_set   : 0.338783
  test_set  : 0.298643
== epoch : 33 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.363296
  dev_set   : 0.257039
  test_set  : 0.241629
== epoch : 34 ==
i : (0/8544)  (cost : 6.481502 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.739466
  dev_set   : 0.320618
  test_set  : 0.331222
== epoch : 35 ==
i : (0/8544)  (cost : 0.000001 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.740871
  dev_set   : 0.326067
  test_set  : 0.298190
== epoch : 36 ==
i : (0/8544)  (cost : 0.002152 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000013 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.707280
  dev_set   : 0.319709
  test_set  : 0.320814
== epoch : 37 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.122307 )
  train_set : 0.672051
  dev_set   : 0.283379
  test_set  : 0.281900
== epoch : 38 ==
i : (0/8544)  (cost : 0.148844 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.107905 )
  train_set : 0.666784
  dev_set   : 0.289737
  test_set  : 0.290950
== epoch : 39 ==
i : (0/8544)  (cost : 0.001275 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.694640
  dev_set   : 0.278837
  test_set  : 0.278281
== epoch : 40 ==
i : (0/8544)  (cost : 0.000006 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000002 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.787921
  dev_set   : 0.337875
  test_set  : 0.314480
== epoch : 41 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000001 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.595272
  dev_set   : 0.264305
  test_set  : 0.276923
== epoch : 42 ==
i : (0/8544)  (cost : 0.048181 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.633193
  dev_set   : 0.279746
  test_set  : 0.311312
== epoch : 43 ==
i : (0/8544)  (cost : 0.003910 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.770482
  dev_set   : 0.289737
  test_set  : 0.291403
== epoch : 44 ==
i : (0/8544)  (cost : 0.000002 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 11.093033 )
  train_set : 0.745787
  dev_set   : 0.287920
  test_set  : 0.314480
== epoch : 45 ==
i : (0/8544)  (cost : 0.000000 )
i : (1000/8544)  (cost : 0.000000 )
i : (2000/8544)  (cost : 0.000000 )
i : (3000/8544)  (cost : 0.000000 )
i : (4000/8544)  (cost : 0.000000 )
i : (5000/8544)  (cost : 0.000000 )
i : (6000/8544)  (cost : 0.000000 )
i : (7000/8544)  (cost : 0.000000 )
i : (8000/8544)  (cost : 0.000000 )
  train_set : 0.837313
  dev_set   : 0.295186
  test_set  : 0.314480